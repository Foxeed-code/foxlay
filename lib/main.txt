import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:desktop_application/components/get_components.dart';
import 'package:desktop_application/components/http_api.dart';
import 'package:desktop_application/components/utilities.dart';
import 'package:desktop_application/components/flutter_bootstrap.dart';
import 'package:get/get.dart';
//import 'package:desktop_application/components/form_components.dart';
//import 'package:desktop_application/components/flutter_layout_grid.dart';
//import 'package:desktop_application/components/validators.dart';
import 'package:get_storage/get_storage.dart';
import 'package:in_app_update/in_app_update.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await GetStorage.init();

  SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp]).then((_) {
    runApp(const MyApp());
  });
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
  }

  Future<void> checkForUpdate() async {
    await InAppUpdate.checkForUpdate().then((info) {
      update();
    }).catchError((e) {
      showSnack(e.toString());
    });
  }

  void update() async {
    await InAppUpdate.performImmediateUpdate();
    await InAppUpdate.performImmediateUpdate().then((_) {}).catchError((e) {
      showSnack(e.toString());
    });
  }

  void showSnack(String text) {
    GetComponents.snackBar(title: 'Message', message: text);
  }

  @override
  Widget build(BuildContext context) {
    return GetMaterialApp(
      title: 'Templates Flutter',
      debugShowMaterialGrid: false,
      debugShowCheckedModeBanner: false,
      themeMode: ThemeMode.system,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Templates Flutter'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  TextEditingController nameController = TextEditingController();
  TextEditingController dateController = TextEditingController();
  String selectedValue = "";
  List<String> listOfValue = ['1', '2', '3', '4', '5'];

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    initValue();
  }

  void initValue() async {
    print(DateTime.now().toString());
    print(AppUtils.userDateFormat(DateTime.now().toString()));
    print(AppUtils.sqlDateFormat(DateTime.now().toString()));
    print(AppUtils.userDateTimeFormat(DateTime.now().toString()));

    await HttpApi.put("req=select&table=test_table", {"sqlData": "userName,selectValue", "where": "id=1"}).then((value) async {
      var data = value['data'];
      setState(() {
        nameController.text = data[0]["user_name"];
        selectedValue = data[0]["select_value"].toString();
        dateController.text = AppUtils.userDateFormat(DateTime.now().toString());
      });
    });
  }

  void onDateChanged(value) {
    if (value != null) {
      String formattedDate = AppUtils.userDateFormat(value.toString());
      setState(() {
        dateController.text = formattedDate;
      });
    }
  }

  void onChanged(value) {
    setState(() {
      selectedValue = value;
    });
  }

  void validateAndSave() async {
    final FormState? form = _formKey.currentState;
    //GetComponents.snackBar(title: 'Message', message: "Test Message");
    //GetComponents.bottomSheet(builder: bottomSheet());
    if (form!.validate()) {
      //update
      await HttpApi.put("req=update&table=test_table&id=1", {"userName": nameController.text, "selectValue": selectedValue}).then((value) {
        print(value);
      });

      // Insert
      // await HttpApi.put("req=insert&table=test_table", {"userName": nameController.text, "selectValue": selectedValue}).then((value) {
      //   print(value["insid"]);
      // });

      if (kDebugMode) {
        print('Form is valid');
      }
    } else {
      if (kDebugMode) {
        print('Form is invalid');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: SingleChildScrollView(
        child: BootstrapContainer(
          fluid: true,
          decoration: const BoxDecoration(color: Colors.blue),
          children: [
            BootstrapContainer(
              fluid: false,
              decoration: const BoxDecoration(color: Colors.white),
              padding: const EdgeInsets.only(top: 50),
              children: <Widget>[
                BootstrapRow(
                  height: 60,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-6',
                      child: const ContentWidget(
                        text: 'col 1 of 2',
                        color: Colors.red,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-6',
                      child: const ContentWidget(
                        text: 'col 2 of 2',
                        color: Colors.red,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                BootstrapRow(
                  height: 60,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-3',
                      child: const ContentWidget(
                        text: 'col 1 of 3',
                        color: Colors.green,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-6',
                      child: const ContentWidget(
                        text: 'col 2 of 3 (wider)',
                        color: Colors.red,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-3',
                      child: const ContentWidget(
                        text: 'col 3 of 3',
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Divider(),
                BootstrapRow(
                  height: 120,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-12 col-md-8',
                      child: const ContentWidget(
                        text: 'col-12 col-md-8',
                        color: Colors.yellow,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-6 col-md-4',
                      child: const ContentWidget(
                        text: 'col-6 col-md-4',
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
                const Divider(),
                BootstrapRow(
                  height: 120,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-9',
                      child: const ContentWidget(
                        text: 'col-9',
                        color: Colors.yellow,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-4',
                      child: const ContentWidget(
                        text: 'col-4\nSince 9+4 = 13 & 13 > 2, this 4-columns gets wrapped onto a new line',
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
                const Divider(),
                BootstrapRow(
                  height: 60,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-md-4',
                      child: const ContentWidget(
                        text: 'col-md-8',
                        color: Colors.red,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-md-4',
                      offsets: 'offset-md-4',
                      child: const ContentWidget(
                        text: 'col-md-4 offset-md-4',
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
                BootstrapRow(
                  height: 60,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-md-3',
                      offsets: 'offset-md-3',
                      child: const ContentWidget(
                        text: 'col-md-3 offset-md-3',
                        color: Colors.yellow,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-md-3',
                      offsets: 'offset-md-3',
                      child: const ContentWidget(
                        text: 'col-md-3 offset-md-3',
                        color: Colors.purple,
                      ),
                    ),
                  ],
                ),
                BootstrapRow(
                  height: 60,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-md-6',
                      offsets: 'offset-md-3',
                      child: const ContentWidget(
                        text: 'col-md-6 offset-md-3',
                        color: Colors.yellow,
                      ),
                    ),
                  ],
                ),
                const Divider(),
                BootstrapRow(
                  height: 200,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-12 col-md-8',
                      orders: 'order-2 order-sm-2 order-md-1 order-lg-1 order-xl-1',
                      child: const ContentWidget(
                        text: 'col-12 col-md-8 order2(xs,sm)',
                        color: Colors.red,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      orders: 'order-1 order-sm-1 order-md-2 order-lg-2 order-xl-2',
                      child: const ContentWidget(
                        text: 'col 2 order1(xs,sm)',
                        color: Colors.green,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      offsets: 'offset-0 offset-sm-0 offset-md-2 offset-lg-4 offset-xl-5',
                      orders: 'order-3 order-sm-3 order-md-3 order-lg-3 order-xl-3',
                      child: const ContentWidget(
                        text: 'col 3',
                        color: Colors.yellow,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      orders: 'order-4 order-sm-4 order-md-4 order-lg-4 order-xl-4',
                      invisibleForSizes: 'sm xl',
                      child: const ContentWidget(
                        text: 'invisible for sm and xl',
                        color: Colors.purple,
                      ),
                    ),
                  ],
                ),
                BootstrapRow(
                  height: 200,
                  children: <BootstrapCol>[
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      orders: 'order-1 order-sm-1 order-md-2 order-lg-2 order-xl-2',
                      child: const ContentWidget(
                        text: 'col 1',
                        color: Colors.green,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      orders: 'order-1 order-sm-1 order-md-2 order-lg-2 order-xl-2',
                      child: const ContentWidget(
                        text: 'col 2',
                        color: Colors.green,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      orders: 'order-1 order-sm-1 order-md-2 order-lg-2 order-xl-2',
                      child: const ContentWidget(
                        text: 'col 3',
                        color: Colors.green,
                      ),
                    ),
                    BootstrapCol(
                      sizes: 'col-12 col-sm-12 col-md-6 col-lg-3 col-xl-3',
                      orders: 'order-1 order-sm-1 order-md-2 order-lg-2 order-xl-2',
                      child: const ContentWidget(
                        text: 'col 4',
                        color: Colors.green,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ],
        ),
      ),
    );

    //       SingleChildScrollView(
    //           child: Form(
    //         key: _formKey,
    //         child: Center(
    //           child: Column(
    //             mainAxisAlignment: MainAxisAlignment.center,
    //             children: <Widget>[
    //               const SizedBox(height: 20),
    //               Forms.datePicker(context: context, onChanged: onDateChanged, labelText: "Select Date", controller: dateController),
    //               const SizedBox(height: 20),
    //               Forms.textField(
    //                 labelText: "Name",
    //                 hintText: "Enter your name",
    //                 controller: nameController,
    //                 keyboardType: TextInputType.number,
    //                 textInputAction: TextInputAction.next,
    //                 validator: Validators.textValidate,
    //               ),
    //               const SizedBox(height: 20),
    //               Forms.dropDownField(
    //                 labelText: "Selet Value",
    //                 selectedValue: selectedValue,
    //                 onChanged: onChanged,
    //                 listOfValue: listOfValue,
    //                 validator: Validators.selectValidate,
    //               ),
    //               const SizedBox(height: 10),
    //               Forms.elevatedButton2(text: 'Submit', onPressed: validateAndSave),
    //               const SizedBox(height: 10),
    //               Forms.text1(text: 'You have pushed the button this many times:', textAlign: TextAlign.center),
    //               const SizedBox(height: 10),
    //               Forms.text2(text: '$_counter', textAlign: TextAlign.center),
    //               const SizedBox(height: 10),
    //               Forms.elevatedButton1(text: 'Increment', onPressed: _incrementCounter),
    //               const SizedBox(height: 10),
    //               Forms.elevatedButton2(text: 'Decrement', onPressed: _decrementCounter),
    //             ],
    //           ),
    //         ),
    //       )));
    //
  }

  Container bottomSheet() {
    return Container(
        height: 250,
        width: double.infinity,
        color: Colors.greenAccent,
        child: const Column(
          children: [
            Text('Hii 1'),
            Text('Hii 2'),
            Text('Hii 3'),
            Text('Hii 4'),
          ],
        ));
  }
}

class ContentWidget extends StatelessWidget {
  const ContentWidget({
    super.key,
    required this.text,
    required this.color,
  });

  final String text;
  final Color color;

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 50,
      color: color,
      child: Text(text),
    );
  }
}
